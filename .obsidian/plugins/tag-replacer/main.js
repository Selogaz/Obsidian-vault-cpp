/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var p=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.prototype.hasOwnProperty;var P=(c,o)=>{for(var t in o)p(c,t,{get:o[t],enumerable:!0})},S=(c,o,t,n)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of m(o))!f.call(c,s)&&s!==t&&p(c,s,{get:()=>o[s],enumerable:!(n=d(o,s))||n.enumerable});return c};var I=c=>S(p({},"__esModule",{value:!0}),c);var y={};P(y,{default:()=>l});module.exports=I(y);var r=require("obsidian"),h=require("path"),v={tagIconPairs:[]},l=class extends r.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new u(this.app,this)),this.addCommand({id:"generate-css",name:"Replace tag display (generate CSS)",callback:()=>this.generateCss()})}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async generateCss(){let t="";for(let e of this.settings.tagIconPairs){let[i,a]=e.tag.split("/"),g=`${i}${a}`;t+=`.tag[href="#${e.tag}"],
`,t+=`.cm-tag-${g},
`,a.includes("_")&&(t+=`.cm-tag-${g} + span.cm-hashtag,
`,t+=`.cm-tag-${g} + span.cm-hashtag + .cm-hashtag,
`)}t=t.slice(0,-2),t+=` {
  font-size: 0px;
  padding: 0;
}

`;for(let e of this.settings.tagIconPairs){let[i,a]=e.tag.split("/"),g=`${i}${a}`;t+=`.tag[href="#${e.tag}"]:after,
`,t+=`.cm-tag-${g}:after,
`,a.includes("_")&&(t+=`.cm-tag-${g} + span.cm-hashtag:after,
`,t+=`.cm-tag-${g} + span.cm-hashtag + .cm-hashtag:after,
`)}t=t.slice(0,-2),t+=` {
  font-size: var(--font-text-size);
}

`;for(let e of this.settings.tagIconPairs){let[i,a]=e.tag.split("/"),g=`${i}${a}`;t+=`.cm-active .tag[href="#${e.tag}"],
`,t+=`.cm-active .cm-tag-${g},
`,a.includes("_")&&(t+=`.cm-active .cm-tag-${g} + span.cm-hashtag,
`,t+=`.cm-active .cm-tag-${g} + span.cm-hashtag + .cm-hashtag,
`)}t=t.slice(0,-2),t+=` {
  font-size: var(--font-text-size);
}

`;for(let e of this.settings.tagIconPairs){let[i,a]=e.tag.split("/"),g=`${i}${a}`;t+=`.tag[href="#${e.tag}"]:after,
`,t+=`.cm-hashtag-begin.cm-tag-${g}:after {
`,t+=`  background-color: rgba(162, 93, 53, 0.1);
`,t+=`  border: solid 1px rgba(209, 209, 209, 0.1);
`,t+=`  border-radius: 3px;
`,t+=`  content: "${e.icon}";
`,t+=`}

`}let n=(0,h.join)(this.app.vault.configDir,"snippets"),s=(0,h.join)(n,"tags.css");try{await this.app.vault.adapter.mkdir(n),await this.app.vault.adapter.write(s,t),console.log("CSS has been written to tags.css in the snippets folder")}catch(e){console.error("Error writing CSS file:",e)}}},u=class extends r.PluginSettingTab{constructor(t,n){super(t,n);this.plugin=n}display(){let{containerEl:t}=this;t.empty(),new r.Setting(t).setName("Tag-Icon Pairs").setDesc("Add tags and their replacement icons (e.g. task/inbox -> \u{1F4E5})").addButton(n=>n.setButtonText("+").onClick(()=>{this.plugin.settings.tagIconPairs.push({tag:"",icon:""}),this.plugin.saveSettings(),this.display()})),this.plugin.settings.tagIconPairs.forEach((n,s)=>{new r.Setting(t).addText(i=>i.setPlaceholder("tag/tag").setValue(n.tag).onChange(async a=>{this.plugin.settings.tagIconPairs[s].tag=a,await this.plugin.saveSettings()})).addText(i=>i.setPlaceholder("icon").setValue(n.icon).onChange(async a=>{this.plugin.settings.tagIconPairs[s].icon=a,await this.plugin.saveSettings()})).addButton(i=>i.setButtonText("\u2191").setTooltip("Move up").onClick(async()=>{if(s>0){let a=this.plugin.settings.tagIconPairs[s-1];this.plugin.settings.tagIconPairs[s-1]=this.plugin.settings.tagIconPairs[s],this.plugin.settings.tagIconPairs[s]=a,await this.plugin.saveSettings(),this.display()}})).addButton(i=>i.setButtonText("\u2193").setTooltip("Move down").onClick(async()=>{if(s<this.plugin.settings.tagIconPairs.length-1){let a=this.plugin.settings.tagIconPairs[s+1];this.plugin.settings.tagIconPairs[s+1]=this.plugin.settings.tagIconPairs[s],this.plugin.settings.tagIconPairs[s]=a,await this.plugin.saveSettings(),this.display()}})).addButton(i=>i.setButtonText("X").setTooltip("Remove").onClick(async()=>{this.plugin.settings.tagIconPairs.splice(s,1),await this.plugin.saveSettings(),this.display()})).infoEl.remove()}),new r.Setting(t).addButton(n=>n.setButtonText("+").onClick(()=>{this.plugin.settings.tagIconPairs.push({tag:"",icon:""}),this.plugin.saveSettings(),this.display()})),new r.Setting(t).setName("Generate CSS").setDesc("Generate and apply CSS based on current settings").addButton(n=>n.setButtonText("Generate CSS").onClick(()=>this.plugin.generateCss()))}};
